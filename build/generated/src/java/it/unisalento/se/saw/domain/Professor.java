package it.unisalento.se.saw.domain;
// Generated 3-ago-2018 14.36.53 by Hibernate Tools 5.2.0.Final


import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Professor generated by hbm2java
 */
@Entity
@Table(name="Professor"
    ,catalog="mydb"
)
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class Professor  implements java.io.Serializable {


     private ProfessorId id;
     private User user;
     @JsonBackReference
     private Set<Course> courses = new HashSet<Course>(0);
     @JsonBackReference
     private Set<Segnalation> segnalations = new HashSet<Segnalation>(0);
     @JsonBackReference
     private Set<Teaching> teachings = new HashSet<Teaching>(0);

    public Professor() {
    }

	
    public Professor(ProfessorId id, User user) {
        this.id = id;
        this.user = user;
    }
    public Professor(ProfessorId id, User user, Set<Course> courses, Set<Segnalation> segnalations, Set<Teaching> teachings) {
       this.id = id;
       this.user = user;
       this.courses = courses;
       this.segnalations = segnalations;
       this.teachings = teachings;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="idProfessor", column=@Column(name="idProfessor", nullable=false) ), 
        @AttributeOverride(name="userIdUser", column=@Column(name="User_idUser", nullable=false) ) } )
    public ProfessorId getId() {
        return this.id;
    }
    
    public void setId(ProfessorId id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="User_idUser", nullable=false, insertable=false, updatable=false)
    public User getUser() {
        return this.user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="Professor_has_Course", catalog="mydb", joinColumns = { 
        @JoinColumn(name="Professor_idProfessor", nullable=false, updatable=false), 
        @JoinColumn(name="Professor_User_idUser", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="Course_idCourse", nullable=false, updatable=false) })
    public Set<Course> getCourses() {
        return this.courses;
    }
    
    public void setCourses(Set<Course> courses) {
        this.courses = courses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="professor")
    public Set<Segnalation> getSegnalations() {
        return this.segnalations;
    }
    
    public void setSegnalations(Set<Segnalation> segnalations) {
        this.segnalations = segnalations;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="professor")
    public Set<Teaching> getTeachings() {
        return this.teachings;
    }
    
    public void setTeachings(Set<Teaching> teachings) {
        this.teachings = teachings;
    }




}


